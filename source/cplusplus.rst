C++
=====

C++ 是Google许多开源项目的主要开发编程语言。每个 C++ 程序员都知道，这种语言有许多强大的特性，但是这种强大也带来了程序的复杂性，这些复杂性会使程序更加容易出错，也更难去阅读和掌握。

这篇指南的目的是通过详细描述在 C++ 编码要怎样写而不要怎样写来避免这些复杂性。这些规则使程序仍然可以高效的使用 C++ 特性的同时也易于管理。

风格，也称为可读性，是我们用来管理 C++ 代码的约定。风格这个词有点用词不当，因为这些约定不止涵盖了源代码文件的格式。

一种我们保持程序代码易于管理的方法是保持一致性。程序员能够快速看懂其他人的代码是非常重要的。保持一种统一的风格并且遵循约定意味着我们可以轻松的用“模式匹配”来推断什么是变量什么是不变量。一般来说，遵循规范和模式使代码更容易理解。有时，可能会有一些好的建议来改变这些规则，但是我们仍然保持它们的原样来保证一致性。

这篇指南所讲的另一个方面是 C++ 的特性膨胀。 C++ 是一个有着许多高级特性的庞大编程语言，有时我们限制甚至禁止某些特性的使用。这样做是为了保持代码的简洁性，并且防止由于这些特性引起的不通错误和问题。这篇指南列出了这些特性并且解释了为什么要限制它们的使用。


头文件
------

一般来说，每一个 ``.cc`` 文件都应该有一个和它相对应的 ``.h`` 文件。当然也有一些例外的情况，比如单元测试代码和只包含 ``main()`` 函数的比较小的 ``.cc`` 文件。

正确的使用头文件能够使你代码的可读性、规模和性能有一个巨大的改观。

下面的规则将改正你在使用头文件上面的误区。

#define 保护 
`````````````````

所有的头文件都要有 ``#define`` 保护以免被多次包含。符号名称的格式是 ``<PROJECT>_<PATH>_<FILE>_H_`` .

为了保证唯一性, ``define`` 声明必须基于工程代码树的全路径来命名。比如, ``foo`` 工程中的 ``foo/src/bar/baz.h`` 文件应该有如下的保护声明：

.. code-block:: c

    #ifndef FOO_BAR_BAZ_H_
    #define FOO_BAR_BAZ_H_

    ...

    #endif  // FOO_BAR_BAZ_H_


前向声明
``````````

可以通过前向声明普通类来避免不必要的 ``#include`` 包含。

定义 ：
""""""""""

“前向声明”是对类，函数或者没有相关定义的模板的声明。 不管用户代码用了什么符号， ``#include`` 行经常能被前向声明替代。

优点 ：
"""""""""""

* 不必要的 ``#include`` 行使编译器打开更多的文件并且执行更多的输入操作。
* 当头文件里的内容改变后，不必要的 ``#include`` 也会使你的代码更经常的被重新编译

缺点 :
"""""""""

* 在存在模板，定义类型，默认参数，使用声明特性程序中，有时决定一个前向声明的正确形式是很难的。
* 有时在一段给定代码中决定使用前向声明还是 ``#include`` 包含是很难的，特别是当存在隐式转换操作的时候。在最极端的情况下， 用前向声明代替 ``#include`` 包含会悄悄的改变代码的作用。
* 从头文件中前向声明多个符号要比直接 ``#include`` 这个头文件写的更详细。
* 函数和模板的前向声明会妨碍他们所在的头文件为他们的API做兼容性改变。比如，扩大一个参数类型或者增加一个默认值的模板参数。
* 从 ``std::`` 命名空间前向声明符号经常会由于未定义而失败。
* 构建代码支持前向声明（比如，用指针成员代替对象成员）会使代码变得复杂而且运行缓慢。
* 从前向声明获得的实际效率是未经证实的。

总结 ：
""""""""""

* 当要用到一个头文件中的函数声明的时候，就 ``#include`` 那个头文件。
* 当要用到类模板的时候，最好 ``#include`` 那个头文件。
* 当要用到一个普通的类时，依赖一个前向声明是可以的，但是要注意前向声明可能会没有效率甚至错误；当不确定的时候，就 ``#include`` 那个头文件。
* 不要为了减掉一行 ``#include`` ，用指针去替换数据成员。

总是 ``#include`` 那些提供你需要的定义或者声明的头文件；不要使用不是通过头文件直接包含进来的符号。一个例外的情况是， ``myfile.cc`` 可能会依赖它的头文件 ``myfile.h`` 中的 ``#includes`` 的头文件和前向声明。


内联函数
`````````

只有当函数很小，比如说10行或者更少的时候，我们才会去定义内联函数。

定义 ：
"""""""""

对于内联函数，编译器在编译阶段会直接展开代码，而不是像通常的函数调用机制去处理它们。

优点 ：
""""""""""

只要一个函数足够小，将它声明为内联的，就能够生成更加高效的目标代码。可以随意将类成员的访问函数和设置函数和一些短而且对性能有很高要求的函数声明为内联函数。

缺点 ：
"""""""""

过度的使用内联函数会使程序运行缓慢。一个内联函数的规模的大小会造成代码增加或者减少。内联一个很小的设置函数经常能够减少代码规模，而内联一个比较长的函数会急剧增加代码的规模。对于现代的处理器，小的代码段因为指令缓存的使用而运行的更快。

总结 ：
"""""""""

经验告诉我们如果一个函数超过了10行，就不要内联它。要当心析构函数，由于隐式成员和基类的析构，它们往往比看起来的要长！

另外一个很有用的经验是 ：如果把一个含有循环和 ``switch`` 语句的函数声明为内联的，那么往往会使性能下降（除非，一般情况下，循环和 ``switch`` 是不会被执行的）。

必须要要知道的是就算有些函数像上面定义的内联函数那样也是不能被内联的。比如，虚函数和迭代函数一般都不能被内联。让一个虚函数内联的主要原因是把它定义在类里面，不管是为了方便还是为它的行为提供文档参考，比如类成员的访问函数和设置函数。

-inl 文件 
`````````````

必要的时候，我们可以用 ``-inl.h`` 后缀的文件来定义复杂的内联函数。

内联函数的定义必须在一个头文件中，这样编译器在调用它们的地方就能知道它的函数定义。然而实现代码应当在 ``.cc`` 文件中，我们也不喜欢有很多实现代码在 ``.h`` 文件中，除非这样做能够提高可读性和性能。

如果一个内联函数的定义特别短，基本没有逻辑语句在里面，那么你可以把实现代码写在 ``.h`` 文件中。比如，类成员的设置和访问函数的实现就写在类声明里面。为方便实现者和调用者，更复杂的内联函数也可以放在 ``.h`` 文件中，如果这样让 ``.h`` 文件太笨拙的话，可以把代码放在一个分离的 ``-inl.h`` 文件中。这样能把实现代码从类定义里面分离出来，当需要的时候仍然可以把这些 ``.inl.h`` 文件包含进来。

``-inl.h`` 文件的另一个用途是函数模板的定义。这样可以让你的模板定义更容易阅读。

记住 ``-inl.h`` 文件和其它头文件一样也需要 ``#define`` 保护。

函数参数顺序
``````````````

当定义一个函数的时候，参数的顺序是这样的 ：输入参数，然后是输出参数。

C/C++ 函数的参数要么是只有输入，要么是只有输出，要么都有。输入参数一般都是常量值或者有 ``const`` 限制的，然而输出参数或者输入/输出参数不会有 ``const`` 限制。当我们对函数参数排序的时候，把所有只用作输入的参数放在所有输出参数之前。不要因为要新添参数就把它放在最后，应该还是按照规定输入输出顺序来放置。

当然，这也不是一个不可违逆的规则，一些既是输入又是输出的参数（经常是类或者结构体）会把这个规则搞乱。所以，保持这些函数的一致性有时需要你不一定完全遵守规则。

includes 文件的名字和顺序
``````````````````````````

要用标准的顺序来保证可读性并且避免隐含的依赖，标准的先后顺序是 : C 的头文件，C++ 的头文件， 其它第三方库的头文件和自己工程的头文件。

工程的所有头文件都应该安装源代码目录树的顺序来排列，而不要使用 UNIX 的简化目录 ``.`` (当前目录) 和 ``..`` （上级目录）。比如， ``google-awesome-project/src/base/logging.h`` 应该这样被包含 ：

.. code-block:: c

    #include "base/logging.h"

``dir/foo.cc`` 或者 ``dir/foo_test.cc`` 文件的主要功能是实现并且测试 ``dir2/foo2.h`` 文件中的东西，头文件包含的顺序应该是 ：

 #. ``dir2/foo2.h`` (优先位置，详情如下)
 #. C 的头文件 
 #. C++ 的头文件 
 #. 其它库的头文件 
 #. 工程的头文件

对于优先的头文件，如果 ``dir2/foo2.h`` 遗漏了任何必需的 ``includes`` 行， ``dir/foo.cc`` 或者 ``dir/foo_test.cc`` 的编译都会有问题。因此，这条规则保证构建出错的时候第一个提示是对应的的头文件，而不是其它库的“无辜”的头文件。

``dir/foo.cc`` 和 ``dir2/foo2.h`` 一般都在统一个目录（比如 ``base/basictypes_test.cc`` 和 ``base/basictypes.h`` )，但是也可以在不同的目录。

在每一个分类中，头文件包含的顺序都要按照字母表排序，注意比较老的代码可能没有遵守这个规则，如果方便的话就更改一下。

比如， ``google-awesome-project/src/foo/internal/fooserver.cc`` 文件的 ``include`` 行可能看起来是这样的 ：

.. code-block:: c
    
    #include "foo/public/fooserver.h"  // Preferred location.

    #include <sys/types.h>
    #include <unistd.h>
    #include <hash_map>
    #include <vector>

    #include "base/basictypes.h"
    #include "base/commandlineflags.h"
    #include "foo/public/bar.h"


范围
-------

to be continued.

